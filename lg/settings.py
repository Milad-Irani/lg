"""
Django settings for lg project.

Generated by 'django-admin startproject' using Django 3.1.7.

For more information on this file, see
https://docs.djangoproject.com/en/3.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/3.1/ref/settings/
"""

from pathlib import Path
import os
from urllib.parse import urlparse

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/3.1/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = os.environ.get("SECRET_KEY", "foo")

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = os.environ.get("DEBUG", False)

if os.environ.get("ALLOWED_HOSTS", False):
    ALLOWED_HOSTS = os.environ["ALLOWED_HOSTS"].split(",")
else:
    ALLOWED_HOSTS = []

# Application definition

INSTALLED_APPS = [
    "django.contrib.admin",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    "django.contrib.staticfiles",
    "core.apps.CoreConfig",
    "utils.apps.UtilsConfig",
    "job.apps.JobConfig",
]

MIDDLEWARE = [
    "django.middleware.security.SecurityMiddleware",
    "django.contrib.sessions.middleware.SessionMiddleware",
    "django.middleware.common.CommonMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
]

ROOT_URLCONF = "lg.urls"

TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [],
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.debug",
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
            ],
        },
    },
]

WSGI_APPLICATION = "lg.wsgi.application"


# Database
# https://docs.djangoproject.com/en/3.1/ref/settings/#databases

DATABASES = {
    "default": {
        "ENGINE": "django.db.backends.sqlite3",
        "NAME": BASE_DIR / "db.sqlite3",
    }
}


# Password validation
# https://docs.djangoproject.com/en/3.1/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    # {
    #     'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    # },
    {
        "NAME": "django.contrib.auth.password_validation.MinimumLengthValidator",
    },
    # {
    #     'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    # },
    # {
    #     'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    # },
]


# Internationalization
# https://docs.djangoproject.com/en/3.1/topics/i18n/

LANGUAGE_CODE = "en-us"

TIME_ZONE = "UTC"

USE_I18N = True

USE_L10N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/3.1/howto/static-files/

STATIC_URL = "/static/"
STATIC_ROOT = "static/"
STATICFILES_DIRS = []

DEFAULT_FILE_STORAGE = os.environ.get("DEFAULT_FILE_STORAGE")

# LOGGING
class InfoLoggerFilter:
    """
    the aim of this logger filter is to prevent emmiting error events (or higher) into `info` handler.
    """

    def __init__(self):
        self.warning_level_num = 30

    def filter(self, log_record):
        return log_record.levelno <= self.warning_level_num


LOGGING = {
    "version": 1,
    "disable_existing_loggers": False,
    "formatters": {
        "verbose": {
            "format": "{levelname} {asctime} {filename}/{funcName} {message}",
            "style": "{",
            "datefmt": "%d/%m/%y %I:%M:%S %p",
        },
    },
    "handlers": {
        "info": {
            "level": "DEBUG",
            "class": "logging.FileHandler",
            "filename": "info.log",
            "formatter": "verbose",
            "filters": ["info-logger-filter"],
        },
        "database_queries": {
            "level": "DEBUG",
            "class": "logging.FileHandler",
            "filename": "/dev/null",
        },
        "null": {"class": "logging.NullHandler"},
        "error": {
            "level": "ERROR",
            "class": "logging.FileHandler",
            "filename": "error.log",
            "formatter": "verbose",
        },
    },
    "loggers": {
        "django.db.backends": {
            "handlers": ["database_queries"],
            "level": "DEBUG",
            "propagate": False,
        },
        "django.security.DisallowedHost": {
            "handlers": ["null"],
            "propagate": False,
        },
        "core": {"handlers": ["info", "error"], "propagate": False, "level": "DEBUG"},
        "utils": {"handlers": ["info", "error"], "propagate": False, "level": "DEBUG"},
        "job": {"handlers": ["info", "error"], "propagate": False, "level": "DEBUG"},
    },
    "filters": {"info-logger-filter": {"()": "lg.settings.InfoLoggerFilter"}},
}


AWS_STORAGE_BUCKET_NAME = os.environ.get("AWS_STORAGE_BUCKET_NAME", "ffmpeg")
AWS_ACCESS_KEY_ID = os.environ.get("AWS_ACCESS_KEY_ID")
AWS_SECRET_ACCESS_KEY = os.environ.get("AWS_SECRET_ACCESS_KEY")
AWS_S3_FILE_OVERWRITE = False
AWS_S3_ENDPOINT_URL = os.environ.get("AWS_S3_ENDPOINT_URL")
AWS_S3_REGION_NAME = os.environ.get("AWS_S3_REGION_NAME")
AWS_DEFAULT_ACL = os.environ.get("AWS_DEFAULT_ACL")
AWS_QUERYSTRING_AUTH = os.environ.get("AWS_QUERYSTRING_AUTH")

if os.environ.get("isProd", False):
    STATICFILES_STORAGE = "whitenoise.storage.CompressedManifestStaticFilesStorage"
    database_url = urlparse(os.environ.get("DATABASE_URL"))
    DATABASES = {
        "default": {
            "ENGINE": "django.db.backends.postgresql",
            "NAME": database_url.path[1:],
            "USER": database_url.username,
            "PASSWORD": database_url.password,
            "HOST": database_url.hostname,
            "PORT": database_url.port,
        }
    }

# by setting this value, djnago is_sequre method will return True if the request had header `HTTP_X_FORWARDED_PROTO: https`. in our case our proxy (nginx) sets this header so djnago recognize sequre requests if client calls django via https.sequring requests have many benefits such as DRF makes pagination links as https.
SECURE_PROXY_SSL_HEADER = ("HTTP_X_FORWARDED_PROTO", "https")

THREAD_CNT = int(os.environ.get("THREAD_CNT" , 3))
TRIM_BUFFER = int(os.environ.get("TRIM_BUFFER" , 30))
FILES_BASE_DIR = Path('/files/')
SLEEP_TIME = int(os.environ.get("SLEEP_TIME" , 60))

DEFAULT_TWITCH_FILE_EXT = '.mkv' #as in the twich-dl docs declared , default downloaded files format is mkv
